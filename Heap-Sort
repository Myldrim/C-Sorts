#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void heapify(int arr[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(int arr[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (int i = n - 1; i > 0; i--) {
        swap(&arr[0], &arr[i]);
        heapify(arr, i, 0);
    }
}

void preencherArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % 100000; // Número aleatório entre 0 e 99999
    }
}

int main() {
    srand(time(NULL)); 

    int tamanhos[] = {100, 1000, 10000, 50000, 100000}; 
    int numTamanhos = sizeof(tamanhos) / sizeof(tamanhos[0]);

    for (int t = 0; t < numTamanhos; t++) {
        int n = tamanhos[t];
        int *arr = (int *)malloc(n * sizeof(int));
        if (arr == NULL) {
            printf("Erro ao alocar memória para o array de tamanho %d\n", n);
            return 1;
        }

        preencherArray(arr, n);

        clock_t inicio = clock();
        heapSort(arr, n);
        clock_t fim = clock();

        double tempo_cpu = ((double)(fim - inicio)) / CLOCKS_PER_SEC;
        printf("Tempo de execução do Heap Sort para %d elementos: %f segundos\n", n, tempo_cpu);

        free(arr);
    }

    return 0;
}